@using BlazorComponentRegistry
@inherits RegisterableComponent
@inject IComponentRegistryService componentRegistry
@implements IDisposable

<div class="registry-wrapper">
    <div class="registry-title">
        <span style="display: inline;" @onclick="ToggleDisplayTree" class="caret @(DisplayTree ? "caret-down" : "")" title="Toggle the visibility of the component registry tree main area.">
        </span>
        <h5>Blazor Component Registry Tree</h5>
        <img src="_content/BlazorComponentRegistry/images/icon-128.png" alt="Blazor Icon" class="blazor-img" />
    </div>
    @if (DisplayTree)
    {
        <div class="component-tree-wrapper @(DisplayTree ? "expanded" : "")">
            <div style="flex:auto;">
                <button style="border-radius: 10px; background-color: #5c2d91; color: black; margin: 5px;" @onclick="CollapseTree" @onclick:preventDefault>Collapse Tree</button>
                @* This only operates on the root level components, which then recurse inside the ComponentRegistryTree component.*@
                @if (components != null && components.Count > 0)
                {
                    @foreach (ComponentRegistryEntry entry in components)
                    {
                        <ComponentRegistryTree SelectedEntry="selectedEntry" Trunk="entry" SelectedEntryChanged="SetSelectedEntry"></ComponentRegistryTree>
                    }          
                }
            </div>
            <div id="param-col" style="flex:auto;">
                @if (selectedEntry != null)
                {
                    <div class="component-parameters-wrapper">
                        <label>Parameters:</label>
                        <ul>
                            @if (selectedEntry.Parameters != null && selectedEntry.Parameters.Count > 0)
                            {
                                @foreach (var param in selectedEntry.Parameters)
                                {
                                    <li>
                                        @if (param.Value != null)
                                        {
                                            @* Do the reflection once per loop since it is expensive *@
                                            Type type = param.Value.GetType();
                                            @if (type == typeof(string))
                                            {
                                                @param.Key @:(string): @($"\"{param.Value}\"")
                                            }
                                            else if (type == typeof(bool))
                                            {
                                                @param.Key @:(bool): @param.Value.ToString().ToLower()
                                            }
                                            else if (type == typeof(int))
                                            {
                                                @param.Key @:(int): @param.Value
                                            }
                                            else if (type == typeof(long))
                                            {
                                                @param.Key @:(long): @param.Value
                                            }
                                            else if (type == typeof(double))
                                            {
                                                @param.Key @:(double): @param.Value
                                            }
                                            else if (type == typeof(decimal))
                                            {
                                                @param.Key @:(decimal): @param.Value
                                            }
                                            else if (type == typeof(double))
                                            {
                                                @param.Key @:(double): @param.Value
                                            }
                                            else if (type == typeof(float))
                                            {
                                                @param.Key @:(float): @param.Value
                                            }
                                            else if (type == typeof(DateTime))
                                            {
                                                @param.Key @:(DateTime): @param.Value
                                            }
                                            else
                                            {
                                                @param.Key <span>(@($"{type.Name.ToString().Replace(type.Namespace ?? "", "").ToLower()}")):</span> @param.Value
                                            }
                                        }
                                        else
                                        {
                                            <span>@param.Key:</span>@: null
                                        }
                                    </li>
                                }
                            }
                            else
                            {
                                <li>None</li>
                            }
                        </ul>
                    </div>
                    @*<label>Scoped CSS</label>*@
                }
            </div>
        </div>
    }
</div>

@code {
    private bool DisplayTree = true;
    private System.Collections.Immutable.IImmutableList<ComponentRegistryEntry> components;
    private IList<ComponentRegistryEntry> ExpandedNodes = new List<ComponentRegistryEntry>();
    private ComponentRegistryEntry selectedEntry;
    private bool firstLoad = true;

    private async void registry_ComponentTreeChanged()
    {
        // https://stackoverflow.com/questions/56477829/how-to-fix-the-current-thread-is-not-associated-with-the-renderers-synchroniza
        await InvokeAsync(() =>
        {
            components = componentRegistry.GetComponents();
            StateHasChanged();
        });
    }

    protected override void OnInitialized()
    {
        if (firstLoad)
        {
            components = componentRegistry.GetComponents();
            componentRegistry.ComponentTreeChanged += registry_ComponentTreeChanged;
            firstLoad = false;
        }
        base.OnInitialized();
    }

    private void SetSelectedEntry(ComponentRegistryEntry entry)
    {
        selectedEntry = entry;
    }

    private void ToggleDisplayTree()
    {
        DisplayTree = !DisplayTree;
    }

    private void CollapseTree()
    {
        componentRegistry.CollapseTree();
        selectedEntry = null;
    }

    public void Dispose()
    {
        componentRegistry.ComponentTreeChanged -= registry_ComponentTreeChanged;
    }
}
